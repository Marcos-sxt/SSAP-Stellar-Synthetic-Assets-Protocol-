#!/usr/bin/env python3
"""
Teste do SAPP Risk Analyzer
Script para testar a IA de an√°lise de risco
"""

import sys
import os
import time
from datetime import datetime, timedelta

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from risk_analyzer import SAPPRiskAnalyzer, PositionData, RiskAlert

def test_risk_calculation():
    """Testa c√°lculo de score de risco"""
    print("üß™ TESTE 1: C√°lculo de Score de Risco")
    print("=" * 50)
    
    analyzer = SAPPRiskAnalyzer()
    
    # Teste 1: Posi√ß√£o est√°vel
    stable_position = PositionData(
        position_id=1,
        leg1_market="WTI",
        leg2_market="Brent",
        leg1_size=1000,
        leg2_size=-1000,
        margin=1000000,
        entry_spread=-400000000000,  # -$4.00
        current_spread=-400000000000,  # -$4.00 (sem mudan√ßa)
        timestamp=datetime.now()
    )
    
    risk_score = analyzer._calculate_risk_score(stable_position)
    print(f"‚úÖ Posi√ß√£o est√°vel - Score: {risk_score:.2f}")
    
    # Teste 2: Posi√ß√£o com alta volatilidade
    volatile_position = PositionData(
        position_id=2,
        leg1_market="WTI",
        leg2_market="Brent",
        leg1_size=1000,
        leg2_size=-1000,
        margin=1000000,
        entry_spread=-400000000000,  # -$4.00
        current_spread=-800000000000,  # -$8.00 (100% de mudan√ßa)
        timestamp=datetime.now()
    )
    
    risk_score = analyzer._calculate_risk_score(volatile_position)
    print(f"‚ö†Ô∏è Posi√ß√£o vol√°til - Score: {risk_score:.2f}")
    
    # Teste 3: Posi√ß√£o cr√≠tica
    critical_position = PositionData(
        position_id=3,
        leg1_market="WTI",
        leg2_market="Brent",
        leg1_size=1000,
        leg2_size=-1000,
        margin=1000000,
        entry_spread=-400000000000,  # -$4.00
        current_spread=-1200000000000,  # -$12.00 (200% de mudan√ßa)
        timestamp=datetime.now()
    )
    
    risk_score = analyzer._calculate_risk_score(critical_position)
    print(f"üö® Posi√ß√£o cr√≠tica - Score: {risk_score:.2f}")
    
    print()

def test_alert_generation():
    """Testa gera√ß√£o de alertas"""
    print("üß™ TESTE 2: Gera√ß√£o de Alertas")
    print("=" * 50)
    
    analyzer = SAPPRiskAnalyzer()
    
    # Teste com diferentes scores de risco
    test_scores = [0.1, 0.4, 0.6, 0.8, 0.95]
    
    for score in test_scores:
        test_position = PositionData(
            position_id=1,
            leg1_market="WTI",
            leg2_market="Brent",
            leg1_size=1000,
            leg2_size=-1000,
            margin=1000000,
            entry_spread=-400000000000,
            current_spread=-400000000000,
            timestamp=datetime.now()
        )
        
        # Simular score de risco
        alert = analyzer._generate_alert(test_position, score)
        
        if alert:
            print(f"Score {score:.2f}: {alert.alert_type} - {alert.message}")
            print(f"  Recomenda√ß√£o: {alert.recommendation}")
        else:
            print(f"Score {score:.2f}: Sem alerta necess√°rio")
        print()

def test_volatility_analysis():
    """Testa an√°lise de volatilidade"""
    print("üß™ TESTE 3: An√°lise de Volatilidade")
    print("=" * 50)
    
    analyzer = SAPPRiskAnalyzer()
    
    # Teste com diferentes mudan√ßas de spread
    spread_changes = [
        (0.01, "Mudan√ßa m√≠nima"),
        (0.05, "Mudan√ßa moderada"),
        (0.10, "Mudan√ßa alta"),
        (0.20, "Mudan√ßa extrema")
    ]
    
    for change, description in spread_changes:
        position = PositionData(
            position_id=1,
            leg1_market="WTI",
            leg2_market="Brent",
            leg1_size=1000,
            leg2_size=-1000,
            margin=1000000,
            entry_spread=-400000000000,  # -$4.00
            current_spread=-400000000000 * (1 + change),  # Aplicar mudan√ßa
            timestamp=datetime.now()
        )
        
        volatility_score = analyzer._calculate_volatility_risk(position)
        print(f"{description} ({change*100:.1f}%): Score {volatility_score:.2f}")
    
    print()

def test_margin_analysis():
    """Teste an√°lise de margem"""
    print("üß™ TESTE 4: An√°lise de Margem")
    print("=" * 50)
    
    analyzer = SAPPRiskAnalyzer()
    
    # Teste com diferentes n√≠veis de margem
    margin_levels = [
        (0.3, "Margem baixa"),
        (0.6, "Margem m√©dia"),
        (0.8, "Margem alta"),
        (0.95, "Margem cr√≠tica")
    ]
    
    for margin_ratio, description in margin_levels:
        # Simular posi√ß√£o com diferentes n√≠veis de margem
        position = PositionData(
            position_id=1,
            leg1_market="WTI",
            leg2_market="Brent",
            leg1_size=1000,
            leg2_size=-1000,
            margin=int(1000000 * margin_ratio),  # Ajustar margem
            entry_spread=-400000000000,
            current_spread=-400000000000,
            timestamp=datetime.now()
        )
        
        margin_score = analyzer._calculate_margin_risk(position)
        print(f"{description} ({margin_ratio*100:.0f}%): Score {margin_score:.2f}")
    
    print()

def test_monitoring_simulation():
    """Simula monitoramento cont√≠nuo"""
    print("üß™ TESTE 5: Simula√ß√£o de Monitoramento")
    print("=" * 50)
    
    analyzer = SAPPRiskAnalyzer()
    
    # Adicionar posi√ß√µes de teste
    positions = [
        PositionData(
            position_id=1,
            leg1_market="WTI",
            leg2_market="Brent",
            leg1_size=1000,
            leg2_size=-1000,
            margin=1000000,
            entry_spread=-400000000000,
            current_spread=-400000000000,
            timestamp=datetime.now()
        ),
        PositionData(
            position_id=2,
            leg1_market="Gold",
            leg2_market="Silver",
            leg1_size=10,
            leg2_size=-1000,
            margin=1000000,
            entry_spread=33000000000000,
            current_spread=35000000000000,  # Spread aumentou
            timestamp=datetime.now()
        )
    ]
    
    analyzer.positions = {pos.position_id: pos for pos in positions}
    
    print("üìä Analisando posi√ß√µes...")
    for position in positions:
        risk_score = analyzer._calculate_risk_score(position)
        alert = analyzer._generate_alert(position, risk_score)
        
        print(f"Posi√ß√£o {position.position_id} ({position.leg1_market}-{position.leg2_market}):")
        print(f"  Score de risco: {risk_score:.2f}")
        if alert:
            print(f"  Alerta: {alert.alert_type} - {alert.message}")
        else:
            print(f"  Status: Est√°vel")
        print()
    
    # Resumo geral
    summary = analyzer.get_risk_summary()
    print(f"üìà Resumo geral: {summary}")

def main():
    """Executa todos os testes"""
    print("üß† SAPP RISK ANALYZER - TESTES")
    print("=" * 60)
    print()
    
    try:
        test_risk_calculation()
        test_alert_generation()
        test_volatility_analysis()
        test_margin_analysis()
        test_monitoring_simulation()
        
        print("‚úÖ Todos os testes conclu√≠dos com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro durante os testes: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
